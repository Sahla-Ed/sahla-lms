generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id
  name           String
  email          String
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  sessions       Session[]
  accounts       Account[]
  courses        Course[]
  enrollment     Enrollment[]
  lessonProgress LessonProgress[]
  quizAttempts   QuizAttempt[]
  certificates   Certificate[]
  tenantId       String?

  stripeCustomerId String? @unique

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email, tenantId])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId  String?

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  tenantId              String?

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
  tenantId   String?

  @@map("verification")
}

model Course {
  id String @id @default(uuid())

  title       String
  description String
  fileKey     String?
  price       Int
  duration    Int
  level       CourseLevel @default(Beginner)

  stripePriceId String @unique

  category         String
  smallDescription String
  slug             String @unique

  status CourseStatus @default(Draft)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  chapter      Chapter[]
  enrollment   Enrollment[]
  questions    Question[]
  certificates Certificate[]
  tenantId     String?
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archived
}

model Chapter {
  id String @id @default(uuid())

  title    String
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String

  lessons  Lesson[]
  tenantId String?
}

model Lesson {
  id String @id @default(uuid())

  title        String
  description  String?
  thumbnailKey String?
  videoKey     String?
  position     Int

  type  LessonType @default(VIDEO)
  timer Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  lessonProgress LessonProgress[]
  questions      LessonQuestion[]
  attempts       QuizAttempt[]
  tenantId       String?
}

model Enrollment {
  id String @id @default(uuid())

  amount Int
  status EnrollmentStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tenantId  String?

  @@unique([userId, courseId])
}

enum EnrollmentStatus {
  Pending
  Active
  Cancelled
}

model LessonProgress {
  id String @id @default(uuid())

  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  Lesson   Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String
  tenantId String?

  @@unique([userId, lessonId])
}

enum LessonType {
  VIDEO
  QUIZ
}

enum QuestionType {
  MCQ
  TRUE_FALSE
}

model Question {
  id          String       @id @default(uuid())
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  text        String
  type        QuestionType
  options     Json // For MCQ: ["Option A", "Option B", "Option C"], For T/F: ["True", "False"]
  answer      String // For MCQ: "Option B", For T/F: "True"
  explanation String?

  lessons LessonQuestion[]
  answers UserAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LessonQuestion {
  lessonId   String
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  position   Int
  tenantId   String?

  @@id([lessonId, questionId])
}

model QuizAttempt {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  score       Int // e.g., 80 for 80%
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  timeElapsed Int? // Time taken in seconds
  tenantId    String?

  answers UserAnswer[]

  @@index([userId, lessonId])
}

model UserAnswer {
  id         String      @id @default(uuid())
  attemptId  String
  attempt    QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId String
  question   Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer     String // The user's selected answer
  isCorrect  Boolean
  tenantId   String?

  @@unique([attemptId, questionId])
}

model Certificate {
  id       String   @id @default(uuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  issuedAt DateTime @default(now())

  @@unique([userId, courseId])
}
