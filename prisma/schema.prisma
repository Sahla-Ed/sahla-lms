generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id
  name          String
  email         String          @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  courses       Course[]        @relation("UserCourses")
  enrollment    Enrollment[]
  lessonProgress LessonProgress[]
  quizAttempts  QuizAttempt[]
  certificates  Certificate[]

  stripeCustomerId String? @unique

  role        String?
  banned      Boolean?
  banReason   String?
  banExpires  DateTime?

  assignedCourseAssistants CourseAssistant[] @relation("AssignedBy")
  courseAssistants         CourseAssistant[] @relation("CourseAssistants")
  courseInstructors        Course[]          @relation("CourseInstructors")

  @@map("user")
}

model Session {
  id            String  @id
  expiresAt     DateTime
  token         String  @unique
  createdAt     DateTime
  updatedAt     DateTime
  ipAddress     String?
  userAgent     String?
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  activeOrganizationId String?
  activeTeamId         String?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  logo      String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members     Member[]
  invitations Invitation[]
  teams       Team[]
}

model Member {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @default(now())

  teams          TeamMember[]

  @@unique([userId, organizationId])
}

model Invitation {
  id             String       @id @default(uuid())
  email          String
  inviterId      String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           String
  status         String       @default("pending")
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
}

model Team {
  id             String       @id @default(uuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  members TeamMember[]
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([teamId, memberId])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]
  teamId      String?
}

model Course {
  id               String         @id @default(uuid())
  title            String
  description      String
  fileKey          String?
  price            Int
  duration         Int
  level            CourseLevel    @default(Beginner)
  stripePriceId    String         @unique
  category         String
  smallDescription String
  slug             String         @unique
  status           CourseStatus   @default(Draft)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation("UserCourses", fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  Project          Project?       @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId        String?
  chapter          Chapter[]
  enrollment       Enrollment[]
  questions        Question[]
  certificates     Certificate[]
  instructors      User[]         @relation("CourseInstructors")
  assistants       CourseAssistant[]
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archived
}

model Chapter {
  id        String   @id @default(uuid())
  title     String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]
}

model Lesson {
  id             String           @id @default(uuid())
  title          String
  description    String?
  thumbnailKey   String?
  videoKey       String?
  position       Int
  type           LessonType       @default(VIDEO)
  timer          Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Chapter        Chapter          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId      String
  lessonProgress LessonProgress[]
  questions      LessonQuestion[]
  attempts       QuizAttempt[]
}

model CourseAssistant {
  id           String   @id @default(uuid())
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  assistantId  String
  assistant    User     @relation("CourseAssistants", fields: [assistantId], references: [id], onDelete: Cascade)
  assignedById String
  assignedBy   User     @relation("AssignedBy", fields: [assignedById], references: [id], onDelete: Cascade)
  permissions  Json
  createdAt    DateTime @default(now())
}

model Enrollment {
  id        String           @id @default(uuid())
  amount    Int
  status    EnrollmentStatus @default(Pending)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  Course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([userId, courseId])
}

enum EnrollmentStatus {
  Pending
  Active
  Cancelled
}

model LessonProgress {
  id        String   @id @default(uuid())
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String

  @@unique([userId, lessonId])
}

enum LessonType {
  VIDEO
  QUIZ
}

enum QuestionType {
  MCQ
  TRUE_FALSE
}

model Question {
  id          String           @id @default(uuid())
  courseId    String
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  text        String
  type        QuestionType
  options     Json
  answer      String
  explanation String?
  lessons     LessonQuestion[]
  answers     UserAnswer[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model LessonQuestion {
  lessonId   String
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  position   Int

  @@id([lessonId, questionId])
}

model QuizAttempt {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId    String
  lesson      Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  score       Int
  startedAt   DateTime   @default(now())
  completedAt DateTime?
  timeElapsed Int?
  answers     UserAnswer[]

  @@index([userId, lessonId])
}

model UserAnswer {
  id         String      @id @default(uuid())
  attemptId  String
  attempt    QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId String
  question   Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer     String
  isCorrect  Boolean

  @@unique([attemptId, questionId])
}

model Certificate {
  id       String   @id @default(uuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  issuedAt DateTime @default(now())

  @@unique([userId, courseId])
}