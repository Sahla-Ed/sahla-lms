diff --git a/dist/adapters/prisma-adapter/index.d.ts b/dist/adapters/prisma-adapter/index.d.ts
index a3719d8c3c7807c9822ad266ebab5dd91a570892..4aec1f28e7e5732250380230fda17766e23879ef 100644
--- a/dist/adapters/prisma-adapter/index.d.ts
+++ b/dist/adapters/prisma-adapter/index.d.ts
@@ -27,6 +27,13 @@ interface PrismaConfig {
      * @default false
      */
     usePlural?: boolean;
+     /**
+     * tanentID  
+     *
+     * @default "" 
+     */
+    tenantId?: string;
+
 }
 interface PrismaClient {
 }
diff --git a/dist/adapters/prisma-adapter/index.mjs b/dist/adapters/prisma-adapter/index.mjs
index de2150464d8c3205ad55a5f4a91b16b7e9e40698..043789e5011763310d1cccb72cde5f411e42c6a1 100644
--- a/dist/adapters/prisma-adapter/index.mjs
+++ b/dist/adapters/prisma-adapter/index.mjs
@@ -18,12 +18,31 @@ import '@better-auth/utils/hex';
 import '@noble/hashes/utils';
 import '../../shared/better-auth.B4Qoxdgc.mjs';
 
+const addTenantIdCondetion = (where, tenantId )  => {  
+	if (!tenantId) {  
+		return where || [];  
+	}  
+  
+	const addTenantIdCondetion  = {  
+		field: "tenantId",  
+		operator: "eq",  
+		value: tenantId,  
+		connector: "AND"  
+	};  
+  
+	if (!where || where.length === 0) {  
+		return [projectIdCondition];  
+	}  
+  
+	return [addTenantIdCondetion, ...where];  
+};
+
 const prismaAdapter = (prisma, config) => createAdapter({
   config: {
     adapterId: "prisma",
     adapterName: "Prisma Adapter",
     usePlural: config.usePlural ?? false,
-    debugLogs: config.debugLogs ?? false
+    debugLogs: config.debugLogs ?? false,
   },
   adapter: ({ getFieldName }) => {
     const db = prisma;
@@ -84,6 +103,8 @@ const prismaAdapter = (prisma, config) => createAdapter({
     };
     return {
       async create({ model, data: values, select }) {
+        values.tenantId = config.tenantId
+        console.log("prisma generte",{model,  values, select})
         if (!db[model]) {
           throw new BetterAuthError(
             `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`
@@ -95,19 +116,26 @@ const prismaAdapter = (prisma, config) => createAdapter({
         });
       },
       async findOne({ model, where, select }) {
-        const whereClause = convertWhereClause(model, where);
+        const whereWithTanentId = addTenantIdCondetion(where , config.tenantId) 
+        const whereClause = convertWhereClause(model, whereWithTanentId);
+        console.log("findone",{ model, where, select ,t:JSON.stringify(whereClause)})
         if (!db[model]) {
           throw new BetterAuthError(
             `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`
           );
         }
+        console.log( await db[model].findFirst({
+          where: whereClause,
+          select: convertSelect(select, model)
+        }))
         return await db[model].findFirst({
           where: whereClause,
           select: convertSelect(select, model)
         });
       },
       async findMany({ model, where, limit, offset, sortBy }) {
-        const whereClause = convertWhereClause(model, where);
+        const whereWithTanentId = addTenantIdCondetion(where , config.tenantId) 
+        const whereClause = convertWhereClause(model, whereWithTanentId);
         if (!db[model]) {
           throw new BetterAuthError(
             `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`
@@ -125,7 +153,8 @@ const prismaAdapter = (prisma, config) => createAdapter({
         });
       },
       async count({ model, where }) {
-        const whereClause = convertWhereClause(model, where);
+        const whereWithTanentId = addTenantIdCondetion(where , config.tenantId) 
+        const whereClause = convertWhereClause(model, whereWithTanentId);
         if (!db[model]) {
           throw new BetterAuthError(
             `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`
@@ -141,14 +170,16 @@ const prismaAdapter = (prisma, config) => createAdapter({
             `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`
           );
         }
-        const whereClause = convertWhereClause(model, where);
+        const whereWithTanentId = addTenantIdCondetion(where , config.tenantId) 
+        const whereClause = convertWhereClause(model, whereWithTanentId);
         return await db[model].update({
           where: whereClause,
           data: update
         });
       },
       async updateMany({ model, where, update }) {
-        const whereClause = convertWhereClause(model, where);
+        const whereWithTanentId = addTenantIdCondetion(where , config.tenantId) 
+        const whereClause = convertWhereClause(model, whereWithTanentId);
         const result = await db[model].updateMany({
           where: whereClause,
           data: update
@@ -156,7 +187,8 @@ const prismaAdapter = (prisma, config) => createAdapter({
         return result ? result.count : 0;
       },
       async delete({ model, where }) {
-        const whereClause = convertWhereClause(model, where);
+        const whereWithTanentId = addTenantIdCondetion(where , config.tenantId) 
+        const whereClause = convertWhereClause(model, whereWithTanentId);
         try {
           await db[model].delete({
             where: whereClause
@@ -165,7 +197,8 @@ const prismaAdapter = (prisma, config) => createAdapter({
         }
       },
       async deleteMany({ model, where }) {
-        const whereClause = convertWhereClause(model, where);
+        const whereWithTanentId = addTenantIdCondetion(where , config.tenantId) 
+        const whereClause = convertWhereClause(model, whereWithTanentId);
         const result = await db[model].deleteMany({
           where: whereClause
         });
diff --git a/dist/shared/better-auth.CUMpWXN6.d.ts b/dist/shared/better-auth.CUMpWXN6.d.ts
index 8fd2b1809aa1e0cb3d00500e378fa19e0f24459d..d4ed303ff7197e580deed36be0441868bb9ff66d 100644
--- a/dist/shared/better-auth.CUMpWXN6.d.ts
+++ b/dist/shared/better-auth.CUMpWXN6.d.ts
@@ -739,6 +739,7 @@ declare const accountSchema: z.ZodObject<{
     password: z.ZodOptional<z.ZodNullable<z.ZodString>>;
     createdAt: z.ZodDefault<z.ZodDate>;
     updatedAt: z.ZodDefault<z.ZodDate>;
+    tenantId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
 }, z.core.$strip>;
 declare const userSchema: z.ZodObject<{
     id: z.ZodString;
@@ -746,6 +747,7 @@ declare const userSchema: z.ZodObject<{
     emailVerified: z.ZodDefault<z.ZodBoolean>;
     name: z.ZodString;
     image: z.ZodOptional<z.ZodNullable<z.ZodString>>;
+    tenantId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
     createdAt: z.ZodDefault<z.ZodDate>;
     updatedAt: z.ZodDefault<z.ZodDate>;
 }, z.core.$strip>;
@@ -758,6 +760,7 @@ declare const sessionSchema: z.ZodObject<{
     token: z.ZodString;
     ipAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
     userAgent: z.ZodOptional<z.ZodNullable<z.ZodString>>;
+    tenantId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
 }, z.core.$strip>;
 declare const verificationSchema: z.ZodObject<{
     id: z.ZodString;
@@ -766,6 +769,7 @@ declare const verificationSchema: z.ZodObject<{
     updatedAt: z.ZodDefault<z.ZodDate>;
     expiresAt: z.ZodDate;
     identifier: z.ZodString;
+    tenantId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
 }, z.core.$strip>;
 declare function parseOutputData<T extends Record<string, any>>(data: T, schema: {
     fields: Record<string, FieldAttribute>;
@@ -13802,6 +13806,7 @@ declare const betterAuth: <O extends BetterAuthOptions>(options: O & Record<neve
                         token: string;
                         ipAddress?: string | null | undefined;
                         userAgent?: string | null | undefined;
+                    tenantId?: string | null | undefined;
                     } & (O extends BetterAuthOptions ? AdditionalSessionFieldsOutput<O> : O extends Auth ? AdditionalSessionFieldsOutput<O["options"]> : {})>>;
                     user: UnionToIntersection<StripEmptyObjects<{
                         id: string;
@@ -13811,6 +13816,7 @@ declare const betterAuth: <O extends BetterAuthOptions>(options: O & Record<neve
                         createdAt: Date;
                         updatedAt: Date;
                         image?: string | null | undefined;
+                    tenantId?: string | null | undefined;
                     } & (O extends BetterAuthOptions ? AdditionalUserFieldsOutput<O> : O extends Auth ? AdditionalUserFieldsOutput<O["options"]> : {})>>;
                 } | null;
             } : {
@@ -13823,6 +13829,7 @@ declare const betterAuth: <O extends BetterAuthOptions>(options: O & Record<neve
                     token: string;
                     ipAddress?: string | null | undefined;
                     userAgent?: string | null | undefined;
+                    tenantId?: string | null | undefined;
                 } & (O extends BetterAuthOptions ? AdditionalSessionFieldsOutput<O> : O extends Auth ? AdditionalSessionFieldsOutput<O["options"]> : {})>>;
                 user: UnionToIntersection<StripEmptyObjects<{
                     id: string;
@@ -13832,6 +13839,7 @@ declare const betterAuth: <O extends BetterAuthOptions>(options: O & Record<neve
                     createdAt: Date;
                     updatedAt: Date;
                     image?: string | null | undefined;
+                    tenantId?: string | null | undefined;
                 } & (O extends BetterAuthOptions ? AdditionalUserFieldsOutput<O> : O extends Auth ? AdditionalUserFieldsOutput<O["options"]> : {})>>;
             } | null>;
             options: {
diff --git a/dist/shared/better-auth.DORkW_Ge.mjs b/dist/shared/better-auth.DORkW_Ge.mjs
index 7c116e184430a711ee4f3743058224205f10ca76..d7b296879657691ae7782eda6ea82129223f1f51 100644
--- a/dist/shared/better-auth.DORkW_Ge.mjs
+++ b/dist/shared/better-auth.DORkW_Ge.mjs
@@ -42,6 +42,12 @@ const getAuthTables = (options) => {
     session: {
       modelName: options.session?.modelName || "session",
       fields: {
+        tenantId: {
+          type: "string",
+          required: false,
+          fieldName:  "tenantId"
+        },
+
         expiresAt: {
           type: "date",
           required: true,
@@ -93,6 +99,11 @@ const getAuthTables = (options) => {
     user: {
       modelName: options.user?.modelName || "user",
       fields: {
+        tenantId: {
+          type: "string",
+          required: false,
+          fieldName:  "tenantId"
+        },
         name: {
           type: "string",
           required: true,
@@ -139,6 +150,11 @@ const getAuthTables = (options) => {
     account: {
       modelName: options.account?.modelName || "account",
       fields: {
+        tenantId: {
+          type: "string",
+          required: false,
+          fieldName:  "tenantId"
+        },
         accountId: {
           type: "string",
           required: true,
@@ -211,6 +227,11 @@ const getAuthTables = (options) => {
     verification: {
       modelName: options.verification?.modelName || "verification",
       fields: {
+        tenantId: {
+          type: "string",
+          required: false,
+          fieldName:  "tenantId"
+        },
         identifier: {
           type: "string",
           required: true,
